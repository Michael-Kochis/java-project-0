DROP TABLE BANKUSER CASCADE CONSTRAINTS;
CREATE TABLE BANKUSER 
   ("BANKUID" NUMBER, 
	"USERNAME" VARCHAR2(40 BYTE) NOT NULL ENABLE, 
	"PASSWD" VARCHAR2(256 BYTE), 
	 PRIMARY KEY ("BANKUID")
   );
   
CREATE OR REPLACE PROCEDURE new_user   
(   neo_uid IN BANKUSER.BANKUID%TYPE,
    neo_name IN BANKUSER.USERNAME%TYPE,
	neo_password IN BANKUSER.PASSWD%TYPE
)
IS
BEGIN
    INSERT INTO BANKUSER(BANKUID, USERNAME, PASSWD) VALUES (neo_uid, neo_name, neo_password);
END;
/

BEGIN 
  new_user(0, 'BigMoney', '$2a$10$hwLbjzKYDVaZDJHma1ioee8NkLbLnhF0tlnNo/r5GmbWyi2QpOQw6');
END;
/
 
DROP TABLE PERMISSION CASCADE CONSTRAINTS;
CREATE TABLE PERMISSION 
   (	PERMISSION NUMBER PRIMARY KEY
   );
  INSERT INTO PERMISSION VALUES (0);
  INSERT INTO PERMISSION VALUES (1);
  
DROP TABLE USER_PERMISSION CASCADE CONSTRAINTS;
CREATE TABLE USER_PERMISSION   
  (	
     BANKUID NUMBER NOT NULL, 
	 PERMISSION NUMBER NOT NULL, 
	 PRIMARY KEY ("BANKUID", "PERMISSION"),
	 FOREIGN KEY ("BANKUID")
	  REFERENCES BANKUSER("BANKUID"), 
	 FOREIGN KEY ("PERMISSION")
	  REFERENCES PERMISSION ("PERMISSION") 
  );

DROP TABLE BANKACCOUNTTYPE CASCADE CONSTRAINTS;
CREATE TABLE BANKACCOUNTTYPE 
   (	"ACCOUNTTYPE" VARCHAR2(40 BYTE) PRIMARY KEY, 
        "BANKUID"     NUMBER UNIQUE NOT NULL
   );
INSERT INTO BANKACCOUNTTYPE (ACCOUNTTYPE, BANKUID) VALUES ('ACCT_CHECK', 1);
INSERT INTO BANKACCOUNTTYPE (ACCOUNTTYPE, BANKUID) VALUES ('ACCT_SAVE', 0);
INSERT INTO BANKACCOUNTTYPE (ACCOUNTTYPE, BANKUID) VALUES ('APPLY_CHECK', 2);
INSERT INTO BANKACCOUNTTYPE (ACCOUNTTYPE, BANKUID) VALUES ('APPLY_SAVE', 3);

DROP TABLE BANKACCOUNT CASCADE CONSTRAINTS;
CREATE TABLE BANKACCOUNT 
   (	"BANKUID" NUMBER PRIMARY KEY, 
	"ACCTTYPE" NUMBER DEFAULT 0, 
	"AMOUNT" NUMBER CHECK (AMOUNT >= 0.0),
	FOREIGN KEY ("ACCTTYPE")
	  REFERENCES BANKACCOUNTTYPE (BANKUID)
	);
INSERT INTO BANKACCOUNT VALUES (0, 1, 250);	
	
CREATE OR REPLACE PROCEDURE xfer_funds(
    source_acct IN NUMBER, dest_acct IN NUMBER, t_amount IN NUMBER
)	
IS
  source_bal NUMBER;
  target_bal NUMBER;
BEGIN
  SELECT (amount - tamount) INTO source_bal FROM BANKACCOUNT WHERE bankuid = source_acct;
  UPDATE BANKACCOUNT SET AMOUNT = source_bal WHERE BANKUID = source_acct;
  SELECT (amount + tamount) INTO target_bal FROM BANKACCOUNT WHERE bankuid = dest_acct;
  UPDATE BANKACCOUNT SET AMOUNT = target_bal WHERE BANKUID = dest_acct;
  COMMIT;
END;
/

BEGIN 
  xfer_funds(0, 0, 10);
END;
/
  
DROP TABLE USER_ACCOUNT CASCADE CONSTRAINTS;
CREATE TABLE USER_ACCOUNT 
   (	"USERUID" NUMBER, 
	"ACCTUID" NUMBER, 
	 PRIMARY KEY ("USERUID", "ACCTUID"),
	 FOREIGN KEY ("USERUID")
	  REFERENCES BANKUSER ("BANKUID"), 
	 FOREIGN KEY ("ACCTUID")
	  REFERENCES BANKACCOUNT ("BANKUID")
   );
  
DROP TABLE TRANSTYPE CASCADE CONSTRAINTS;
CREATE TABLE TRANSTYPE 
   (	"TRANSTYPE" VARCHAR2(40 BYTE) PRIMARY KEY, 
		"TRANSID"   NUMBER NOT NULL
	);
INSERT INTO "TRANSTYPE" VALUES('TRANS_DEPOSIT', 1);
INSERT INTO "TRANSTYPE" VALUES('TRANS_WITHDRAW', 0);


DROP TABLE "BANKTRANS" CASCADE CONSTRAINTS;
CREATE TABLE "BANKTRANS" 
   (	"TRANSUID" NUMBER PRIMARY KEY, 
	"USERUID" NUMBER NOT NULL, 
	"ACCOUNTUID" NUMBER NOT NULL, 
	"TRANSTYPE" NUMBER NOT NULL, 
	"AMOUNT" FLOAT(126), 
	"TRANSDAY" DATE, 
	"TRANSTIME" TIMESTAMP (6) WITH TIME ZONE
	);